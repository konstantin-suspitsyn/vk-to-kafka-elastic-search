/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.suspitsyn.microservices.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class VKStream extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 185849558070849859L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VKStream\",\"namespace\":\"ru.suspitsyn.microservices.kafka.avro.model\",\"fields\":[{\"name\":\"eventType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"postOwnerId\",\"type\":[\"int\",\"long\"]},{\"name\":\"postId\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"long\"]},{\"name\":\"eventUrl\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"text\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"creationTime\",\"type\":[\"long\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<VKStream> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<VKStream> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<VKStream> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<VKStream> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<VKStream> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this VKStream to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a VKStream from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a VKStream instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static VKStream fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String eventType;
  private java.lang.Object postOwnerId;
  private java.lang.Object postId;
  private java.lang.String eventUrl;
  private java.lang.String text;
  private java.lang.Long creationTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VKStream() {}

  /**
   * All-args constructor.
   * @param eventType The new value for eventType
   * @param postOwnerId The new value for postOwnerId
   * @param postId The new value for postId
   * @param eventUrl The new value for eventUrl
   * @param text The new value for text
   * @param creationTime The new value for creationTime
   */
  public VKStream(java.lang.String eventType, java.lang.Object postOwnerId, java.lang.Object postId, java.lang.String eventUrl, java.lang.String text, java.lang.Long creationTime) {
    this.eventType = eventType;
    this.postOwnerId = postOwnerId;
    this.postId = postId;
    this.eventUrl = eventUrl;
    this.text = text;
    this.creationTime = creationTime;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventType;
    case 1: return postOwnerId;
    case 2: return postId;
    case 3: return eventUrl;
    case 4: return text;
    case 5: return creationTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventType = value$ != null ? value$.toString() : null; break;
    case 1: postOwnerId = value$; break;
    case 2: postId = value$; break;
    case 3: eventUrl = value$ != null ? value$.toString() : null; break;
    case 4: text = value$ != null ? value$.toString() : null; break;
    case 5: creationTime = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.String getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'postOwnerId' field.
   * @return The value of the 'postOwnerId' field.
   */
  public java.lang.Object getPostOwnerId() {
    return postOwnerId;
  }


  /**
   * Sets the value of the 'postOwnerId' field.
   * @param value the value to set.
   */
  public void setPostOwnerId(java.lang.Object value) {
    this.postOwnerId = value;
  }

  /**
   * Gets the value of the 'postId' field.
   * @return The value of the 'postId' field.
   */
  public java.lang.Object getPostId() {
    return postId;
  }


  /**
   * Sets the value of the 'postId' field.
   * @param value the value to set.
   */
  public void setPostId(java.lang.Object value) {
    this.postId = value;
  }

  /**
   * Gets the value of the 'eventUrl' field.
   * @return The value of the 'eventUrl' field.
   */
  public java.lang.String getEventUrl() {
    return eventUrl;
  }


  /**
   * Sets the value of the 'eventUrl' field.
   * @param value the value to set.
   */
  public void setEventUrl(java.lang.String value) {
    this.eventUrl = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.String getText() {
    return text;
  }


  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.String value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'creationTime' field.
   * @return The value of the 'creationTime' field.
   */
  public java.lang.Long getCreationTime() {
    return creationTime;
  }


  /**
   * Sets the value of the 'creationTime' field.
   * @param value the value to set.
   */
  public void setCreationTime(java.lang.Long value) {
    this.creationTime = value;
  }

  /**
   * Creates a new VKStream RecordBuilder.
   * @return A new VKStream RecordBuilder
   */
  public static ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder newBuilder() {
    return new ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder();
  }

  /**
   * Creates a new VKStream RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VKStream RecordBuilder
   */
  public static ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder newBuilder(ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder other) {
    if (other == null) {
      return new ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder();
    } else {
      return new ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder(other);
    }
  }

  /**
   * Creates a new VKStream RecordBuilder by copying an existing VKStream instance.
   * @param other The existing instance to copy.
   * @return A new VKStream RecordBuilder
   */
  public static ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder newBuilder(ru.suspitsyn.microservices.kafka.avro.model.VKStream other) {
    if (other == null) {
      return new ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder();
    } else {
      return new ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder(other);
    }
  }

  /**
   * RecordBuilder for VKStream instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VKStream>
    implements org.apache.avro.data.RecordBuilder<VKStream> {

    private java.lang.String eventType;
    private java.lang.Object postOwnerId;
    private java.lang.Object postId;
    private java.lang.String eventUrl;
    private java.lang.String text;
    private java.lang.Long creationTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.postOwnerId)) {
        this.postOwnerId = data().deepCopy(fields()[1].schema(), other.postOwnerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.postId)) {
        this.postId = data().deepCopy(fields()[2].schema(), other.postId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.eventUrl)) {
        this.eventUrl = data().deepCopy(fields()[3].schema(), other.eventUrl);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.text)) {
        this.text = data().deepCopy(fields()[4].schema(), other.text);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.creationTime)) {
        this.creationTime = data().deepCopy(fields()[5].schema(), other.creationTime);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing VKStream instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.suspitsyn.microservices.kafka.avro.model.VKStream other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.postOwnerId)) {
        this.postOwnerId = data().deepCopy(fields()[1].schema(), other.postOwnerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.postId)) {
        this.postId = data().deepCopy(fields()[2].schema(), other.postId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventUrl)) {
        this.eventUrl = data().deepCopy(fields()[3].schema(), other.eventUrl);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.text)) {
        this.text = data().deepCopy(fields()[4].schema(), other.text);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.creationTime)) {
        this.creationTime = data().deepCopy(fields()[5].schema(), other.creationTime);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.String getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder setEventType(java.lang.String value) {
      validate(fields()[0], value);
      this.eventType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'postOwnerId' field.
      * @return The value.
      */
    public java.lang.Object getPostOwnerId() {
      return postOwnerId;
    }


    /**
      * Sets the value of the 'postOwnerId' field.
      * @param value The value of 'postOwnerId'.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder setPostOwnerId(java.lang.Object value) {
      validate(fields()[1], value);
      this.postOwnerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'postOwnerId' field has been set.
      * @return True if the 'postOwnerId' field has been set, false otherwise.
      */
    public boolean hasPostOwnerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'postOwnerId' field.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder clearPostOwnerId() {
      postOwnerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'postId' field.
      * @return The value.
      */
    public java.lang.Object getPostId() {
      return postId;
    }


    /**
      * Sets the value of the 'postId' field.
      * @param value The value of 'postId'.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder setPostId(java.lang.Object value) {
      validate(fields()[2], value);
      this.postId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'postId' field has been set.
      * @return True if the 'postId' field has been set, false otherwise.
      */
    public boolean hasPostId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'postId' field.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder clearPostId() {
      postId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventUrl' field.
      * @return The value.
      */
    public java.lang.String getEventUrl() {
      return eventUrl;
    }


    /**
      * Sets the value of the 'eventUrl' field.
      * @param value The value of 'eventUrl'.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder setEventUrl(java.lang.String value) {
      validate(fields()[3], value);
      this.eventUrl = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eventUrl' field has been set.
      * @return True if the 'eventUrl' field has been set, false otherwise.
      */
    public boolean hasEventUrl() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eventUrl' field.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder clearEventUrl() {
      eventUrl = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.String getText() {
      return text;
    }


    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder setText(java.lang.String value) {
      validate(fields()[4], value);
      this.text = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder clearText() {
      text = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationTime' field.
      * @return The value.
      */
    public java.lang.Long getCreationTime() {
      return creationTime;
    }


    /**
      * Sets the value of the 'creationTime' field.
      * @param value The value of 'creationTime'.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder setCreationTime(java.lang.Long value) {
      validate(fields()[5], value);
      this.creationTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'creationTime' field has been set.
      * @return True if the 'creationTime' field has been set, false otherwise.
      */
    public boolean hasCreationTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'creationTime' field.
      * @return This builder.
      */
    public ru.suspitsyn.microservices.kafka.avro.model.VKStream.Builder clearCreationTime() {
      creationTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public VKStream build() {
      try {
        VKStream record = new VKStream();
        record.eventType = fieldSetFlags()[0] ? this.eventType : (java.lang.String) defaultValue(fields()[0]);
        record.postOwnerId = fieldSetFlags()[1] ? this.postOwnerId :  defaultValue(fields()[1]);
        record.postId = fieldSetFlags()[2] ? this.postId :  defaultValue(fields()[2]);
        record.eventUrl = fieldSetFlags()[3] ? this.eventUrl : (java.lang.String) defaultValue(fields()[3]);
        record.text = fieldSetFlags()[4] ? this.text : (java.lang.String) defaultValue(fields()[4]);
        record.creationTime = fieldSetFlags()[5] ? this.creationTime : (java.lang.Long) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<VKStream>
    WRITER$ = (org.apache.avro.io.DatumWriter<VKStream>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<VKStream>
    READER$ = (org.apache.avro.io.DatumReader<VKStream>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










